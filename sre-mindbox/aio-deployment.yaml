apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  # Минимум 3 реплики необходимо. Учитываем, что кластер мультизональный, поэтому минимально необходимо хотя бы по 1 поду на каждую зону доступности.
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1        
  template:
    metadata:
      labels:
        app: webapp
    spec:
  # Реализуем pod topology spread constraints для мягкого распределения подов по зонам доступности
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone # Распределяем по зонам
          whenUnsatisfiable: ScheduleAnyway          # Все равно шедулим под, если нельзя соблюсти баланс
          labelSelector:
            matchLabels:
              app: webapp
      affinity:
        podAntiAffinity:
          # Кажется, что лучше использовать preferred правила, чтобы полностью не блокировать деплой, если, к примеру, не хватит нод.
          preferredDuringSchedulingIgnoredDuringExecution:
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - webapp
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: web-server
        image: nginx:latest
        ports:
        - name: http
          containerPort: 80
        resources:
          requests:
            cpu: "200m"    # 0.2 ядра, чтобы реализовать скейлинг HPA. Лимиты на CPU указывать не будем, так как нет конкретной информации о том,
                           # насколько выше нагрузка при первых запросах
            memory: "128Mi"
          limits:
            memory: "256Mi"
  # стартап проба сделает 4 попытки раз в 5 секунд, этого с запасом должно хватить на инициализацию.
  # её реализация позволит дать приложению время на запуск
        startupProbe:
          httpGet:
            path: /
            port: http
          failureThreshold: 4
          periodSeconds: 5
  # теперь реализуем readiness-пробу, чтобы убедиться в том, что приложение готово принимать трафик после того как запустилось
        readinessProbe:
          httpGet:
            path: /
            port: http
          periodSeconds: 5
          failureThreshold: 2
      # Время на корректное завершение работы пода (например, закончить обработку запросов)
      terminationGracePeriodSeconds: 30

---
# PDB решает задачу отказоустойчивости, обеспечивая необходимый минимум рабочих подов.
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: webapp-pdb
spec:
  maxUnavailable: 1
  minAvailable: 3
  selector:
    matchLabels:
      app: webapp

---
# HPA решает задачу неравномерной нагрузки, минимального потребления ресурсов и отказоустойчивости
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webapp-deployment
  minReplicas: 3      
  maxReplicas: 6     # Выбор значения обусловлен тем, что существует вероятность превышения ожидаемой пиковой нагрузки, поэтому обеспечиваем избыточность.
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50 # 50% от запрошенных CPU — 0,1 ядра. Это решает задачу "тяжёлых" первых запросов и учитывает дальнейшее потребление.
  behavior:
    scaleDown:
    # защищаемся от флаппинга
      stabilizationWindowSeconds: 300
      policies:
    # не удаляем больше 2 подов в минуту  
      - type: Pods
        value: 2
        periodSeconds: 60

---
# В ТЗ не сказано, где именно располагается кластер. Предполагаю, что это будет облачное решение, поэтому реализуем сервис типа LoadBalancer
# Это решение поможет распределять трафик по всем сервисам с меткой webapp
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  type: LoadBalancer
  selector:
    app: webapp
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
