apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
spec:
  # Общее количество реплик, которое хотим поддерживать. Так как мы знаем, что с нагрузкой справляются 4 пода, на всякий случай будем поддерживать 5 реплик на случай отвала одной из нод при неожиданном скачке нагрузки. Реализуем это позже через HPA
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
  # Реализуем podAntiAffinity для того, чтобы повысить отказоустойчивость. На каждой ноде будет одна реплика контейнера
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - webapp
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
  # Здесь возможно два варианта, либо делать VPA на 4 всегда существующих подах, либо автоскейлить в зависимости от CPU. Так как в поставленной задаче трудно предположить, насколько "значительно" первые запросы превышают последующие по CPU, выделим каждому поду по 0.5 CPU.
          requests:
            memory: "128Mi"
            cpu: "500m"
  # На всякий случай в лимитах зададим больше вычислительных ресурсов, чтобы обеспечить избыточность
          limits:
            memory: "256Mi"
            cpu: "1"
        readinessProbe:
          httpGet:
            path: /
            port: 80
  # Берём в учёт то, что на инициализацию приложения требуется 10 секунд, значит нам нужно не учитывать его метрики CPU чтобы исключить возможность ненужного скейлинга из-за скачка при запуске пода. Делаем рединес пробу, которая начнет отправляться с задержкой в 10 секунд.
          initialDelaySeconds: 10
          periodSeconds: 5
